--[[
    MIT License

    Copyright (c) 2023 Retro

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
--]]
:Error, :TypeError = include "error.lua"

timer_Simple = timer.Simple
isfunction = isfunction
istable = istable
iscallable = (obj) -> 
    if isfunction obj then return true
    if istable obj then
        meta = getmetatable obj
        return istable(meta) and isfunction(meta.__call)
get_thenable = (obj) ->
    then_fn = obj.Then or obj.next
    iscallable(then_fn) and then_fn
get_awaitable = (obj) ->
    awaitable = obj.Await or obj.await
    iscallable(awaitable) and awaitable
once = () ->
    was_called = false
    (wrapped_fn) ->
        (...) ->
            return ... if was_called
            was_called = true
            wrapped_fn ...
capture_stack = (start_pos = 1) ->
    stack = {}
    for i = 1 + start_pos, 16
        info = debug.getinfo i, "Snl"
        unless info then break
        stack[] = info
    return stack

error_with_custom_stack = (err, stack) ->
    lines = {}
    lines[] = "[gm_promise] Unhandled rejected promise: #{err}"
    for i, info in ipairs stack
        space = string.rep " ", i * 2
        lines[] = "#{space}#{i}. #{info.name or "unknown"} - #{info.short_src}:#{info.currentline}"
    lines[] = "\n\n" -- just a line for new line
    return table.concat lines, "\n"

class HTTPError extends Error

class Promise
    @VERSION: "2.0.0"
    @AUTHOR: "Retro"
    @URL: "https://github.com/dankmolot/gm_promise"

    STATE_PENDING: 1
    STATE_FULFILLED: 2
    STATE_REJECTED: 3

    IsPromise: (obj) -> istable(obj) and obj.__class == Promise

    new: (executor) =>
        @state = @STATE_PENDING
        @resolving = false
        @value = nil
        @reason = nil
        @queue = nil -- Queue is created only if then called in pending state
        -- @stack = capture_stack 3

        if iscallable executor
            @resolving = true
            once_wrapper = once!
            onFulfill = once_wrapper (value) -> @_Resolve value
            onReject = once_wrapper (reason) -> @_Reject reason
            try executor onFulfill, onReject
            catch err
                onReject err

    __tostring: =>
        ptr = string.format "%p", @
        return switch @state
            when @STATE_PENDING
                "Promise #{ptr} { <state>: \"pending\" }"
            when @STATE_FULFILLED
                "Promise #{ptr} { <state>: \"fulfilled\", <value>: #{@value} }"
            when @STATE_REJECTED
                "Promise #{ptr} { <state>: \"rejected\", <reason>: #{@reason} }"
            else
                "Promise #{ptr} { <state>: \"invalid\" }"

    _FinalizePromise: (p) =>
        try
            if @state == @STATE_FULFILLED
                if p.on_fulfilled then p\_Resolve p.on_fulfilled @value
                else p\_Resolve @value
            elseif @state == @STATE_REJECTED
                if p.on_rejected then p\_Resolve p.on_rejected @reason
                else p\_Reject @reason
            if p.on_finally then p.on_finally!
        catch err
            p\_Reject err

    _Finalize: =>
        return if @state == @STATE_PENDING
        timer_Simple 0, ->
            if @queue
                for i, p in ipairs @queue
                    @_FinalizePromise p
                    @queue[i] = nil
            elseif @state == @STATE_REJECTED
                -- final_stack = table.Add {}, @reject_stack
                -- ErrorNoHalt error_with_custom_stack @reason, table.Add final_stack, @stack

    _Fulfill: (value) =>
        @state = @STATE_FULFILLED
        @value = value
        @_Finalize!

    _ResolveThenable: (obj, thenable) =>
        once_wrapper = once!
        onFulfill = once_wrapper (value) -> @_Resolve value
        onReject = once_wrapper (reason) -> @_Reject reason
        unless ok, err = try thenable obj, onFulfill, onReject
            onReject err

    _Resolve: (value) =>
        return if @state != @STATE_PENDING
        return @_Reject TypeError "Cannot resolve a promise with itself" if value == @
        @resolving = true
        @on_fulfilled = nil
        @on_rejected = nil
        @on_finally = nil
        if @.IsPromise value
            if value.state == @STATE_PENDING
                value.queue = {} unless value.queue
                value.queue[] = @
            else
                value\_FinalizePromise @
        elseif istable value
            ok, thenable = try get_thenable value
            unless ok then return @\_Reject thenable

            if thenable
                @_ResolveThenable value, thenable
            else
                @_Fulfill value
        else
            @_Fulfill value

    Resolve: (value) =>
        return if @resolving
        @_Resolve value

    _Reject: (reason) =>
        return unless @state == @STATE_PENDING
        @state = @STATE_REJECTED
        @reason = reason
        -- @reject_stack = capture_stack 1
        -- if @stack[#@stack].currentline == @reject_stack[#@reject_stack].currentline
        --     @reject_stack = {}
        @_Finalize!

    Reject: (reason) =>
        @_Reject reason unless @resolving

    Then: (on_fulfilled, on_rejected, on_finally) =>
        p = Promise!
        p.on_fulfilled = on_fulfilled if iscallable on_fulfilled
        p.on_rejected = on_rejected if iscallable on_rejected
        p.on_finally = on_finally if iscallable on_finally
        @queue = {} unless @queue
        @queue[] = p
        @_Finalize!
        return p
    
    Catch: (on_rejected) => @Then nil, on_rejected
    Finally: (on_finally) => @Then nil, nil, on_finally
    
    @Resolve: (value) -> 
        with Promise!
            \Resolve value
    
    @Reject: (reason) ->
        with Promise!
            \Reject reason

    @All: (promises) ->
        p = Promise!
        count = #promises
        values = {}
        if count == 0 then p\Resolve values 
        for i, promise in ipairs promises
            if Promise.IsPromise promise
                promise\Then (value) ->
                        values[i] = value
                        count -= 1
                        p\Resolve values if count == 0,
                    (reason) => p\Reject reason
            else
                values[i] = promise
                count -= 1
                p\Resolve values if count == 0
        return p

    @AllSettled: (promises) ->
        p = Promise!
        count = #promises
        values = {}
        if count == 0 then p\Resolve values
        for i, promise in ipairs promises
            promise\Then (value) ->
                    values[i] = { status: "fulfilled", value: value }
                    count -= 1
                    p\Resolve values if count == 0,
                (reason) ->
                    values[i] = { status: "rejected", reason: reason }
                    count -= 1
                    p\Resolve values if count == 0
        return p
    
    @Any: (promises) ->
        p = Promise!
        count = #promises
        reasons = {}
        if count == 0 then p\Reject "No promises to resolve"
        for i, promise in ipairs promises
            promise\Then (value) -> p\Resolve value,
                (reason) ->
                    reasons[i] = reason
                    count -= 1
                    p\Resolve reasons if count == 0
        return p

    @Race: (promises) ->
        p = Promise!
        for promise in *promises
            promise\Then (value) -> p\Resolve value,
                (reason) -> p\Reject reason
        return p

    @Async: (fn) -> (...) ->
        p = Promise!
        co = coroutine.create (...) ->
            if success, result = try fn ...
            catch err
                    -- TODO save stacktrace and pass it to reject
                    p\Reject err
                p\Resolve result

        coroutine.resume co, ...
        return p

    SafeAwait: (p) ->
        co = coroutine.running!
        unless co then return false, "Cannot await in main thread"

        once_wrapper = once!
        onResolve = once_wrapper (value) -> coroutine.resume co, true, value
        onReject = once_wrapper (reason) -> coroutine.resume co, false, reason

        if Promise.IsPromise p
            switch p.state
                when p.STATE_FULFILLED
                    return true, p.value
                when p.STATE_REJECTED
                    return false, p.reason
                else
                    p\Then onResolve, onReject
                    return coroutine.yield!
        elseif thenable = istable(p) and get_thenable p
            if iscallable thenable
                try thenable p, onResolve, onReject
                return coroutine.yield!
            else
                return true, p
        else
            return true, p
    
    Await: (p) ->
        awaitable = istable(p) and get_awaitable p
        if awaitable and not Promise.IsPromise p
            return awaitable p

        ok, result = Promise.SafeAwait p
        if ok then return result
        else error result

    @Delay: (time, value) ->
        p = Promise!
        timer.Simple time, -> p\Resolve value
        return p
    
    @HTTP: (options) ->
        p = Promise!
        options.success = (code, body, headers) ->
            p\Resolve { :code, :body, :headers }
        options.failed = (err) ->
            p\Reject HTTPError err
            return -- for better stacktrace
        unless ok = HTTP options
            p\Reject HTTPError "failed to make http request"
        return p

    -- Methods renames
    @__base.resolve = @__base.Resolve
    @__base.reject = @__base.Reject
    @__base.then = @__base.Then
    @__base.next = @__base.Then
    @__base.andThen = @__base.Then
    @__base.catch = @__base.Catch
    @__base.finally = @__base.Finally
    @__base.saveAwait = @__base.SafeAwait
    @__base.await = @__base.Await
    @resolve: @Resolve
    @reject: @Reject
    @all: @All
    @allSettled: @AllSettled
    @any: @Any
    @race: @Race
    @async: @Async
    @delay: @Delay
    @http: @HTTP

Promise.HTTPError = HTTPError
export default Promise
